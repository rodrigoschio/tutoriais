<!doctype html>
<html lang="pt-br">
<head>
	<title>Tutorial programar Jogo com a linguagem C</title>
	<meta name="description" content="Como programar um jogo com a linguagem C. Comandos setvideomode(), dos-like, dos.h, dos.c, sleep() e setcolor()." />
	<link rel="canonical" href="https://rodrigoschio.github.io/tutoriais/modulos/0/index.htm" />
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width" />
	<link rel="icon" href="../../imagens/favicon.ico" />
	<link href="../../css/styles.css" rel="stylesheet" />
	<link href="../../css/prism.css" rel="stylesheet" />
</head>

<body>
	<h1><a href="../../index.htm"><span>Tutoriais</span></a></h1>
	<main>

<article>
<h2>Programar Jogo na Linguagem C</h2>
Esse tutorial é indicado para iniciantes.<br><br>
O tutorial mostra passo-a-passo como desenvolver um joguinho simples.<br><br>
<img class=imagem src=imagens/ss7.png onclick="window.open(this.src,'_blank');"><br><br>
O foco do tutorial é escrita de código, mas além disso também é necessário instalar um compilador.
</article>

<article>
<h2>Download do Compilador</h2>
<a href=Tutorial.zip>Esse arquivo</a> contém o compilador.<br><br>
Compilador é um software que recebe código-fonte e transforma em arquivo executável.<br><br>
Baixe o compilador e extraia a pasta 'Tutorial' para a área de trabalho.
</article>

<article>
<h2>Começando a Escrever</h2>
Para ver como compilar abra o bloco de notas e digite:
<pre><code class="language-c">hello world</code></pre>
Salve o arquivo na pasta 'Tutorial'<br><br>
Clique em "Arquivo -> Salvar Como"<br><br>
Dê o nome "jogo.c" para o arquivo.<br><br>
No campo "Tipo" selecione a opção "Todos os Arquivos"<br><br>
<img class=imagem src=imagens/ss1.png onclick="window.open(this.src,'_blank');"><br><br>
Com isso a gente já criou o arquivo que vai conter o código-fonte que o compilador vai transformar em executável.<br><br>
Mas por enquanto o conteúdo do arquivo ainda não é código-fonte.<br><br>
A linguagem C tem umas regras que esse tutorial vai explicar.
</article>

<article>
<h2>Conhecendo o Compilador</h2>
Para começar vamos tentar compilar esse arquivo:<br><br>
Com as teclas de atalho 'windows + r' o windows abre uma janelinha para receber um comando:<br><br>
<img class=imagem src=imagens/ss2.png onclick="window.open(this.src,'_blank');"><br><br>
Digite "cmd" e aperte "enter".<br><br>
Isso abre a tela do prompt/ms-dos<br><br>
Digite "cd Desktop"<br><br>
Isso significa "change directory para a área de trabalho"<br><br>
Depois digite "cd Tutorial"<br><br>
<img class=imagem src=imagens/ss3.png onclick="window.open(this.src,'_blank');"><br><br>
O compilador está dentro da pasta 'tcc' mas não vamos andar até lá porque o código-fonte está na pasta 'Tutorial'.<br><br>
O comando para usar o compilador fica:
<pre><code class="language-c">tcc\tcc jogo.c</code></pre>
</article>

<article>
<h2>Código em Linguagem C</h2>
Quando esse comando é executado o compilador exibe uma <b>'mensagem de erro'</b> na janelinha do ms-dos.<br>
Porque esse código é inválido.<br><br>
<img class=imagem src=imagens/ss4.png onclick="window.open(this.src,'_blank');"><br><br>
Vamos editar o arquivo 'jogo.c' para que o compilador gere um arquivo executável.<br><br>
Digite:
<pre><code class="language-c">#include&lt;stdio.h>
int main(){
	printf("hello world");
	return 0;
}</code></pre>
e salve.<br><br>
Nessas cinco linhas tem um código-fonte que o compilador entende.<br><br>
Se mandar para o compilador <b>(com o comando 'tcc\tcc jogo.c')</b> ele deve gerar um arquivo executável.<br>
Se ele exibir alguma 'mensagem de erro' pode ser erro de digitação ou o ms-dos não está no diretório 'Tutorial'<br><br>
Essa linha do <b>'include'</b> desbloqueia a função <b>'printf'</b> (que serve para exibir uma mensagem na tela)<br><br>
Essa linha do <b>main()</b> indica para o compilador que aí começa o código.<br><br>
A linha <b>'printf'</b> envia essa string para a tela.
</article>

<article>
<h2>Arquivo Executável</h2>
Com o comando <b>'tcc\tcc jogo.c'</b> um arquivo chamado jogo.exe deve ser gerado.<br><br>
Esse arquivo pode ser executado com duplo-clique do mouse mas por enquanto vamos utilizar o ms-dos para executá-lo.<br><br>
Digite 'jogo.exe'<br><br>
Se tudo está certo, uma mensagem "hello world" deve ser exibida no prompt !<br><br>
Isso significa que o comando 'printf' funcionou<br>
o 'include' funcionou<br>
a 'função main' funcionou<br>
o compilador funcionou<br>
e o executável funcionou.<br><br>
Agora vamos editar esse código-fonte para começar a programar o joguinho.
</article>

<article>
<h2>Tiny C Compiler & dos-like</h2>
Os arquivos dentro da pasta 'dos-like' são uma extensão do compilador 'tcc'<br><br>
tcc é 'tiny C compiler'<br><br>
O conteúdo da pasta 'dos-like' são uns arquivos que servem para que o desenvolvedor gere softwares baseado em 'ms-dos'.<br>
É tipo uma homenagem à época do início da popularização da computação.<br><br>
A iniciativa 'dos-like' é interessante para nós porque serve para mostrar como era programar computadores nessa época.<br><br>
À partir daqui esse tutorial não vai mais usar o comando printf
</article>

<article>
<h2>Modo Gráfico</h2>
O jogo utilizará o modo gráfico do ms-dos para desenhar os elementos na tela<br><br>
A linha do 'include stdio' pode ser apagada<br><br>
Vamos usar o comando include para vincular o código da iniciativa <b>dos-like</b>
<pre><code class="language-c">#include "dos-like/dos.h"</code></pre>
A linha do 'printf' deve ser apagada.<br><br>
No seu lugar vai a linha que coloca a tela no modo grafico do ms-dos:
<pre><code class="language-c">	setvideomode(videomode_320x200);</code></pre>
Dentro de um loop (que é encerrado quando o user pressiona 'Esc') vão os comandos que desenham na tela<br><br>
O comando que escolhe a cor cinza claro para desenhar o background do jogo:
<pre><code class="language-c">		setcolor(15);</code></pre>
Uma variável chamada <b>background</b> amazena 8 números correspondentes a 4 coordenadas (x,y) do background<br>
(20,30)=canto superior esquerdo<br>
(300,30)=canto superior direito<br>
(300,100)=canto inferior direito<br>
(20,100)=canto inferior esquerdo
<pre><code class="language-c">		int background[8]={20,30,300,30,300,100,20,100};</code></pre>
O comando <b>fillpoly</b> preenche na tela o retângulo descrito nessas 4 coordenadas.
<pre><code class="language-c">		fillpoly(background,4);</code></pre>
A função <b>waitvbl</b> é parte importante da biblioteca <b>dos-like</b><br><br>
O código do arquivo <b>jogo.c</b> fica:
<pre><code class="language-c">#include "dos-like/dos.h"
int main(){
	setvideomode(videomode_320x200);
	while(!keystate(KEY_ESCAPE)){
		setcolor(15);
		int background[8]={20,30,300,30,300,100,20,100};
		fillpoly(background,4);
		waitvbl();
	}
	return 0;
}</code></pre>
Para compilar (gerar o arquivo executável) o comando mudou para:
<pre><code class="language-c">tcc\tcc jogo.c dos-like\dos.c</code></pre>
(porque é preciso vincular o 'dos-like' no executável)<br><br>
<b>Verifique</b> se o prompt exibe alguma 'mensagem de erro'.<br>
Se tudo ocorreu bem o arquivo jogo.exe foi gerado novamente e ele <b>agora</b> exibe uma tela assim:<br><br>
<img class=imagem src=imagens/ss5.png onclick="window.open(this.src,'_blank');">
</article>

<article>
<h2>Desenhando o Obstáculo</h2>
Ainda dentro do loop vamos criar uma variável <b>obs1</b> que vai armazenar 6 números.<br><br>
São as coordenadas dos vértices de um triângulo.<br><br>
O obstáculo irá se mover pela tela, mas por enquanto ele fica fixo em uma posição.
<pre><code class="language-c">		setcolor(12);
		int obs1[6]={292,98,296,88,300,98};
		fillpoly(obs1,3);</code></pre>
Quando gera novamente o arqivo (e executa ele), a tela deve ficar assim:<br><br>
<img class=imagem src=imagens/ss6.png onclick="window.open(this.src,'_blank');"><br><br>
Verifique se não tem erro na hora de gerar o .exe pois pode acontecer de não gerar um <b>novo arquivo</b> e você rodar uma versão (do exe) sem as alterações
</article>

<article>
<h2>Fazendo o obstáculo se mover</h2>
A gente cria uma variável obstaculo1 com a posição do obstáculo.<br><br>
Daí a gente incrementa o valor dessa variável de tempos em tempos (milissegundos)<br><br>
E desenha novamente o background e o obstáculo (na posição atualizada)
<pre><code class="language-c">#include "dos-like/dos.h"
int main(){
	int obstaculo1=0;
	setvideomode(videomode_320x200);
	while(!keystate(KEY_ESCAPE)){
		setcolor(15);
		int background[8]={20,30,300,30,300,100,20,100};
		fillpoly(background,4);
		setcolor(12);
		obstaculo1=(obstaculo1+3)%274;
		int obs1[6]={292-obstaculo1,98,296-obstaculo1,88,300-obstaculo1,98};
		if(obstaculo1>0)fillpoly(obs1,3);
		sleep(20);
		waitvbl();
	}
	return 0;
}</code></pre>
A função <b>sleep</b> serve para 'esperar passar' 20 milissegundos (e depois continuar...)
</article>

<article>
<h2>Desenhando o Joe</h2>
<pre><code class="language-c">		setcolor(2);
		int cabeca[8]={52,80,56,80,56,83,52,83};
		fillpoly(cabeca,4);
		int bracos[8]={48,84,60,84,60,86,48,86};
		fillpoly(bracos,4);
		int tronco[8]={53,86,56,86,56,91,53,91};
		fillpoly(tronco,4);
		int pernadir[8]={52,91,54,91,54,98,52,98};
		fillpoly(pernadir,4);
		int pernaesq[8]={55,91,57,91,57,98,55,98};
		fillpoly(pernaesq,4);</code></pre>
</article>

<article>
<h2>Fazendo o Joe Pular</h2>
Assim como para alterar a posição do obstáculo basta alterar uma variável...<br>
com o Joe também será assim.<br><br>
A variável <b>altura</b> indicará onde o Joe será desenhado.<br><br>
As variáveis cabeça,braços,tronco e pernas terão valores baseados na altura.
<pre><code class="language-c">	int altura=0;</code></pre>
<pre><code class="language-c">		int cabeca[8]={52,80-altura,56,80-altura,56,83-altura,52,83-altura};
		fillpoly(cabeca,4);
		int bracos[8]={48,84-altura,60,84-altura,60,86-altura,48,86-altura};
		fillpoly(bracos,4);
		int tronco[8]={53,86-altura,56,86-altura,56,91-altura,53,91-altura};
		fillpoly(tronco,4);
		int pernadir[8]={52,91-altura,54,91-altura,54,98-altura,52,98-altura};
		fillpoly(pernadir,4);
		int pernaesq[8]={55,91-altura,57,91-altura,57,98-altura,55,98-altura};
		fillpoly(pernaesq,4);</code></pre>
Para tratar o pulo serão necessárias 5 condições:
<li>se o joe está no chão e começa o pulo</li>
<li>se o joe está subindo</li>
<li>se o joe está descendo</li>
<li>o momento que ele para de subir</li>
<li>o momento que ele para de descer</li>
<pre><code class="language-c">		if(altura==0&&keystate(KEY_UP))altura=5;
		if(altura%4==1)altura+=4;
		if(altura%4==3)altura-=4;
		if(altura>28)altura=31;
		if(altura&lt;2)altura=0;</code></pre>
</article>

<article>
<h2>Acabamento</h2>
Na versão final está implementada a detecção da colisão e  um 'restart da fase':
<pre><code class="language-c">#include "dos-like/dos.h"
int obstaculo1,obstaculo2,obstaculo3,altura,gameover;
void init(){
	obstaculo1=-250;
	obstaculo2=-250;
	obstaculo3=-250;
	altura=0;
	gameover=0;
}
int main(){
	setvideomode(videomode_320x200);
	init();
	while(!keystate(KEY_ESCAPE)){
		if(gameover!=0){
			if(keystate(KEY_UP))init();
		}else{
			if(altura==0&amp;&amp;keystate(KEY_UP))altura=5;
			if(altura%4==1)altura+=4;
			if(altura%4==3)altura-=4;
			if(altura>28)altura=31;
			if(altura&lt;2)altura=0;
			setcolor(15);
			int background[8]={20,30,300,30,300,100,20,100};
			fillpoly(background,4);
			setcolor(2);
			int cabeca[8]={52,80-altura,56,80-altura,56,83-altura,52,83-altura};
			fillpoly(cabeca,4);
			int bracos[8]={48,84-altura,60,84-altura,60,86-altura,48,86-altura};
			fillpoly(bracos,4);
			int tronco[8]={53,86-altura,56,86-altura,56,91-altura,53,91-altura};
			fillpoly(tronco,4);
			int pernadir[8]={52,91-altura,54,91-altura,54,98-altura,52,98-altura};
			fillpoly(pernadir,4);
			int pernaesq[8]={55,91-altura,57,91-altura,57,98-altura,55,98-altura};
			fillpoly(pernaesq,4);
			setcolor(12);
			obstaculo1=(obstaculo1+3)%274;
			obstaculo2=(obstaculo2+4)%274;
			obstaculo3=(obstaculo3+5)%274;
			int obs1[6]={292-obstaculo1,98,296-obstaculo1,88,300-obstaculo1,98};
			int obs2[6]={292-obstaculo2,98,296-obstaculo2,88,300-obstaculo2,98};
			int obs3[6]={292-obstaculo3,98,296-obstaculo3,88,300-obstaculo3,98};
			if(obstaculo1>0)fillpoly(obs1,3);
			if(obstaculo2>0)fillpoly(obs2,3);
			if(obstaculo3>0)fillpoly(obs3,3);
			if(obstaculo1>232&amp;&amp;obstaculo1&lt;242&amp;&amp;altura&lt;9)gameover=1;
			if(obstaculo2>232&amp;&amp;obstaculo2&lt;242&amp;&amp;altura&lt;9)gameover=1;
			if(obstaculo3>232&amp;&amp;obstaculo3&lt;242&amp;&amp;altura&lt;9)gameover=1;
			sleep(20);
			waitvbl();
		}
	}
	return 0;
}</code></pre>
</article>

	<div id="coment"><div id="disqus_thread"></div></div>
	</main>
	<footer>
		<button onclick="location.href = '../../index.htm';">home</button>
		<button onclick="exibe();">seções</button>
		<button onclick="(document.head || document.body).appendChild(s);">comente</button>
	</footer>

	<script src="../../js/script.js"></script>
	<script src="../../js/prism.js"></script>
</body>
</html>
